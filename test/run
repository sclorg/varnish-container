#!/bin/bash
#
# The 'run' performs a simple test that verifies that S2I image.
# The main focus here is to excersise the S2I scripts.
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#
IMAGE_NAME=${IMAGE_NAME}

# TODO: Make command compatible for Mac users
test_dir="$(readlink -f $(dirname "${BASH_SOURCE[0]}"))"
image_dir=$(readlink -f ${test_dir}/..)

. "$test_dir/test-lib.sh"

TEST_LIST="\
test_s2i_usage
test_docker_run_usage
test_application_default_user
test_application_with_user
"

# TODO: This should be part of the image metadata
test_port=8080

info() {
  echo -e "\n\e[1m[INFO] $@...\e[0m\n"
}

image_exists() {
  docker inspect $1 &>/dev/null
}

run_s2i_build() {
  ct_s2i_build_as_df file://${test_dir}/test-app ${IMAGE_NAME} ${IMAGE_NAME}-testapp ${s2i_args}
}

prepare() {
  if ! image_exists ${IMAGE_NAME}; then
    echo "ERROR: The image ${IMAGE_NAME} must exist before this script is executed."
    exit 1
  fi
  # TODO: S2I build require the application is a valid 'GIT' repository, we
  # should remove this restriction in the future when a file:// is used.
  info "Build the test application image"
  pushd ${test_dir}/test-app >/dev/null
  git init
  git config user.email "build@localhost" && git config user.name "builder"
  git add -A && git commit -m "Sample commit"
  popd >/dev/null
}

run_test_application() {
  local name=$1
  local cidfile="$CID_FILE_DIR/$name"
  run_args=${CONTAINER_ARGS:-}
  docker run --user=100001 ${run_args} --cidfile="${cidfile}" ${IMAGE_NAME}-testapp
}

check_result() {
  local result="$1"
  if [[ "$result" != "0" ]]; then
    TESTCASE_RESULT=1
  fi
  return $result
}

test_s2i_usage() {
  info "Testing 's2i usage'"
  ct_s2i_usage ${IMAGE_NAME} ${s2i_args} &>/dev/null
}

test_docker_run_usage() {
  info "Testing 'docker run' usage"
  docker run --rm ${IMAGE_NAME} &>/dev/null
}

test_scl_usage() {
  local run_cmd="$1"
  local expected="$2"
  local name=$3

  info "Testing the image SCL enable"
  out=$(docker run --rm ${IMAGE_NAME} /bin/bash -c "${run_cmd} 2>&1")
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[/bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
  out=$(docker exec $(ct_get_cid "$name") /bin/bash -c "${run_cmd}" 2>&1)
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[exec /bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
  out=$(docker exec $(ct_get_cid "$name") /bin/sh -ic "${run_cmd}" 2>&1)
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[exec /bin/sh -ic "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
}

test_connection() {
  local name=$1
  info "Testing the HTTP connection (http://$(ct_get_cip $name):${test_port})"
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1

  while [ $attempt -le $max_attempts ]; do
    response=$(curl -s -w "%{redirect_url}" -H "Host:oldexample.com" http://$(ct_get_cip $name):${test_port}/)
    status=$?
    echo "${response}"
    if [ $status -eq 0 ]; then
      if echo "${response}" | grep -q "http://example.org"; then
        echo "Response (with a correct status): ${response}"
        result=0
        break
      else
        echo "Response (with a wrong status): ${response}"
      fi
    fi
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done

  return $result
}

test_application() {
  local name=$1

  # Verify that the HTTP connection can be established to test application container
  run_test_application "$name" &

  # Wait for the container to write it's CID file
  ct_wait_for_cid "$CID_FILE_DIR/$name"
  check_result $?

  test_scl_usage "varnishd -V" "varnish-$VERSION" "$name"
  check_result $?

  test_connection "$name"
  check_result $?
}

test_application_default_user() {
  # Test application with the default uid
  test_application defaultuid
  check_result $?
}

test_application_with_user() {
  # Test application with random uid
  CONTAINER_ARGS="--user 12345" test_application randomuid
  check_result $?
}

CID_FILE_DIR=$(mktemp --suffix=varnish_test_cidfiles -d)
ct_enable_cleanup

# Since we built the candidate image locally, we don't want S2I attempt to pull
# it from Docker hub
s2i_args="--pull-policy=never"

prepare
run_s2i_build
check_result $?

TEST_SET=${TESTS:-$TEST_LIST} ct_run_tests_from_testset

# vim: set tabstop=2:shiftwidth=2:expandtab:
